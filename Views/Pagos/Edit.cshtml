@model InmobiliariaLopez.Models.Pago

@{
  ViewData["Title"] = "Editar Pago";
}

<h1 class="mb-4 text-center" style="font-family: 'Roboto', sans-serif; font-size: 2rem; color: #343a40;">
  Editar Pago
</h1>

<div class="card shadow-lg border-0 rounded-4">
  <div class="card-header bg-gradient text-dark border-0 rounded-4">
    <h5 class="mb-0" style="font-family: 'Roboto', sans-serif; font-size: 1.25rem;">Formulario de Pago</h5>
  </div>
  <div class="card-body" style="padding: 1.5rem;">
    <form asp-action="Edit" method="post" id="formPago">
      @Html.AntiForgeryToken()
      <input type="hidden" asp-for="IdPago" />
      <input type="hidden" asp-for="IdContrato" />
      <input type="hidden" asp-for="TipoPago" />
      <input type="hidden" asp-for="IdMulta" />
      <input type="hidden" asp-for="Importe" />
      <input type="hidden" asp-for="NumeroPagoContrato" />
      <input type="hidden" asp-for="FechaCreacion" />

      <!-- Contrato (solo vista) -->
      <div class="form-group">
        <label asp-for="IdContrato" class="control-label">Contrato</label>
        <select class="form-control" disabled>
          @foreach (var contrato in (List<SelectListItem>)ViewBag.Contratos)
          {
            <option value="@contrato.Value" selected="@(contrato.Value == Model.IdContrato.ToString())">@contrato.Text
            </option>
          }
        </select>
      </div>

      <!-- Fecha de Pago (editable) -->
      <div class="form-group">
        <label asp-for="FechaPago" class="control-label">Fecha de Pago</label>
        <input asp-for="FechaPago" class="form-control" type="date" value="@Model.FechaPago.ToString("yyyy-MM-dd")"
          required />
        <span asp-validation-for="FechaPago" class="text-danger"></span>
      </div>

      <!-- Tipo de Pago (solo vista) -->
      <div class="form-group">
        <label asp-for="TipoPago" class="control-label">Tipo de Pago</label>
        <input class="form-control" value="@Model.TipoPago" readonly />
      </div>

      <!-- Multa asociada (solo si aplica) -->
      @if (Model.IdMulta != null && ViewBag.MultasSinPagar is List<SelectListItem> multas)
      {
        var multaNombre = multas.FirstOrDefault(m => m.Value == Model.IdMulta.ToString())?.Text ?? "Multa registrada";
        <div class="form-group">
          <label class="control-label">Multa Asociada</label>
          <input class="form-control" value="@multaNombre" readonly />
        </div>
      }

      <!-- Importe (solo vista) -->
      <div class="form-group mt-3">
        <label asp-for="Importe" class="control-label fw-bold text-primary">Importe</label>
        <div class="input-group">
          <span class="input-group-text">$</span>
          <input asp-for="Importe" class="form-control" type="number" readonly />
        </div>
      </div>

      <!-- Estado (editable) -->
      <div class="form-group">
        <label asp-for="Estado" class="control-label">Estado</label>
        <select asp-for="Estado" class="form-control" required>
          <option value="Pendiente" selected="@("Pendiente" == Model.Estado)">Pendiente</option>
          <option value="Pagado" selected="@("Pagado" == Model.Estado)">Pagado</option>
          <option value="Anulado" selected="@("Anulado" == Model.Estado)">Anulado</option>
        </select>
        <span asp-validation-for="Estado" class="text-danger"></span>
      </div>

      <!-- Detalle (editable) -->
      <div class="form-group">
        <label asp-for="Detalle" class="control-label">Detalle</label>
        <input asp-for="Detalle" class="form-control" required />
        <span asp-validation-for="Detalle" class="text-danger"></span>
      </div>

      <!-- Botones -->
      <div class="card-footer d-flex justify-content-end mt-3">
        <button type="submit" class="btn btn-primary btn-sm me-2">Guardar</button>
        <a href="@Url.Action("Index")" class="btn btn-secondary btn-sm">Volver al listado</a>
      </div>
    </form>
  </div>
</div>

@section Scripts {
  @await Html.PartialAsync("_ValidationScriptsPartial")
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const form = document.querySelector("#formPago");

      form.addEventListener("submit", async function (event) {
        event.preventDefault(); // Evita el envío tradicional del formulario

        // Verificar si el formulario es válido
        if ($(form).valid()) {
          // Mostrar confirmación antes de enviar el formulario
          const confirmacion = await Swal.fire({
            title: "¿Estás seguro?",
            text: "¿Estás seguro de guardar los cambios en este pago?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#dc3545",
            cancelButtonColor: "#6c757d",
            confirmButtonText: "Sí, guardar",
            cancelButtonText: "Cancelar",
          });

          if (!confirmacion.isConfirmed) return; // Si el usuario cancela, no enviamos el formulario

          // Mostrar mensaje de procesamiento mientras se envía el formulario
          Swal.fire({
            title: "Procesando...",
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading(), // Muestra el spinner de carga
          });

          // Enviar el formulario si el usuario confirma
          form.submit();  // Esta línea vuelve a enviar el formulario normalmente
        } else {
          // Si el formulario no es válido, muestra un mensaje de error
          Swal.fire({
            title: "Error",
            text: "Por favor, corrige los errores en el formulario.",
            icon: "error",
            confirmButtonColor: "#dc3545",
          });
        }
      });
    });
  </script>
}
