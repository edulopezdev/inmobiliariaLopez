@model InmobiliariaLopez.Models.Pago

@{
  ViewData["Title"] = "Crear Pago";
}

<h1 class="mb-4 text-center" style="font-family: 'Roboto', sans-serif; font-size: 2rem; color: #343a40;">
  Crear Nuevo Pago
</h1>

<div class="card shadow-lg border-0 rounded-4">
  <div class="card-header bg-gradient text-dark border-0 rounded-4">
    <h5 class="mb-0" style="font-family: 'Roboto', sans-serif; font-size: 1.25rem;">Formulario de Pago</h5>
  </div>
  <div class="card-body" style="padding: 1.5rem;">
    <form asp-action="Create" method="post" id="formPago">
      @Html.AntiForgeryToken()

      <!-- Contrato -->
      <div class="form-group">
        <label asp-for="IdContrato" class="control-label">Ingrese Domicilio o Inquilino</label>
        <select asp-for="IdContrato" class="form-control select2" id="IdContrato">
          <option value="">Seleccione una propiedad</option>
          @foreach (var contrato in (List<SelectListItem>)ViewBag.Contratos)
          {
            <option value="@contrato.Value">@contrato.Text</option>
          }
        </select>
        <span asp-validation-for="IdContrato" class="text-danger"></span>
      </div>

      <!-- Fecha de Pago -->
      <div class="form-group">
        <label asp-for="FechaPago" class="control-label">Fecha de Pago</label>
        <input asp-for="FechaPago" class="form-control" type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")"
          min="@DateTime.Now.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="FechaPago" class="text-danger"></span>
      </div>

      <!-- Tipo de Pago -->
      <div class="form-group">
        <label asp-for="TipoPago" class="control-label">Tipo de Pago</label>
        <select asp-for="TipoPago" class="form-control" id="tipoPago">
          <option value="Alquiler" selected>Alquiler</option>
          <option value="Multa">Multa</option>
          <option value="Otro">Otro</option>
        </select>
        <span asp-validation-for="TipoPago" class="text-danger"></span>
      </div>

      <!-- Multa asociada -->
      <div class="form-group d-none mt-3" id="multaGroup">
        <label asp-for="IdMulta" class="control-label">Seleccione la multa</label>
        <select asp-for="IdMulta" class="form-control select2" id="IdMulta" name="IdMulta">
          <option value="">Seleccione una multa</option>
          @foreach (var multa in ViewBag.MultasSinPagar as List<SelectListItem>)
          {
            var partes = multa.Text.Split('|');
            <option value="@multa.Value" data-importe="@partes[1]">@partes[0]</option>
          }
        </select>
        <span asp-validation-for="IdMulta" class="text-danger"></span>
      </div>

      <!-- Importe (con estilo monetario) -->
      <div class="form-group mt-3">
        <label asp-for="Importe" class="control-label fw-bold text-primary">Importe</label>
        <div class="input-group">
          <span class="input-group-text">$</span>
          <input asp-for="Importe" class="form-control" type="number" step="0.01" min="0" id="importe" />
        </div>
        <span asp-validation-for="Importe" class="text-danger"></span>
      </div>

      <!-- Estado -->
      <div class="form-group">
        <label asp-for="Estado" class="control-label"></label>
        <select asp-for="Estado" class="form-control">
          <option value="Pendiente">Pendiente</option>
          <option value="Pagado" selected>Pagado</option>
          <option value="Anulado">Anulado</option>
        </select>
        <span asp-validation-for="Estado" class="text-danger"></span>
      </div>

      <!-- Detalle -->
      <div class="form-group">
        <label asp-for="Detalle" class="control-label"></label>
        <input asp-for="Detalle" class="form-control" />
        <span asp-validation-for="Detalle" class="text-danger"></span>
      </div>

      <!-- Botones -->
      <div class="card-footer d-flex justify-content-end">
        <button type="submit" class="btn btn-primary btn-sm me-2">Guardar</button>
        <a href="@Url.Action("Index")" class="btn btn-secondary btn-sm">Volver al listado</a>
      </div>
    </form>
  </div>
</div>

@section Scripts {
  @await Html.PartialAsync("_ValidationScriptsPartial")
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    $(document).ready(function () {
      // Inicializa select2 en contratos
      $('.select2').select2({
        placeholder: "Seleccione una propiedad",
        allowClear: true,
        language: "es"
      });

      // Mostrar u ocultar el grupo de multa según el tipo de pago
      $('#tipoPago').change(function () {
        const tipo = $(this).val();
        const contratoId = $('#IdContrato').val();

        if (tipo === 'Multa') {
          $('#multaGroup').removeClass('d-none');
          $('#importe').prop('readonly', true);

          if (contratoId) {
            cargarMultasPorContrato(contratoId);
          }
        } else {
          $('#multaGroup').addClass('d-none');
          $('#IdMulta').empty().append('<option value="">Seleccione una multa</option>');

          // Si es "Alquiler", cargar el importe automáticamente
          if (tipo === 'Alquiler' && contratoId) {
            cargarImporteContrato(contratoId);
          } else {
            $('#importe').val('').prop('readonly', false);
          }
        }
      });

      // Cuando se selecciona un contrato, si el tipo es "Multa", cargar sus multas
      $('#IdContrato').change(function () {
        const contratoId = $(this).val();
        const tipo = $('#tipoPago').val();

        if (tipo === 'Multa') {
          cargarMultasPorContrato(contratoId);
        } else if (tipo === 'Alquiler') {
          cargarImporteContrato(contratoId);
        }
      });

      // Cuando seleccionás una multa, actualizar el importe
      $('#IdMulta').change(function () {
        const importe = $(this).find('option:selected').data('importe');
        $('#importe').val(importe || '');
      });

      // Cargar multas dinámicamente desde el controlador
      function cargarMultasPorContrato(contratoId) {
        $.getJSON('/Pagos/ObtenerMultasPorContrato', { contratoId }, function (data) {
          const multaSelect = $('#IdMulta');
          multaSelect.empty();
          multaSelect.append('<option value="">Seleccione una multa</option>');
          data.forEach(multa => {
            multaSelect.append(`<option value="${multa.idMulta}" data-importe="${multa.monto}">$${multa.monto.toFixed(2)} - ${multa.motivo}</option>`);
          });
        }).fail(function () {
          alert("Hubo un problema al cargar las multas.");
        });
      }

      // Cargar automáticamente el importe del contrato (para Alquiler)
      function cargarImporteContrato(contratoId) {
        $.getJSON(`/Pagos/ObtenerImporteContrato/${contratoId}`, function (data) {
          if (data.success) {
            $('#importe').val(data.monto);
            $('#importe').prop('readonly', true);
          } else {
            alert("No se pudo obtener el monto del contrato.");
            $('#importe').val('').prop('readonly', false);
          }
        }).fail(function () {
          alert("Error al obtener el importe del contrato.");
          $('#importe').val('').prop('readonly', false);
        });
      }

      // Al cargar la vista, forzar el comportamiento del tipo de pago
      $('#tipoPago').trigger('change');

      // Mostrar SweetAlert al enviar el formulario
      $('#formPago').submit(function (event) {
        event.preventDefault(); // Evita el envío del formulario

        const formData = $(this).serialize();

        // Validaciones previas antes de la confirmación
        let errores = [];
        if ($('#IdContrato').val() === "") {
          errores.push("Debés seleccionar un contrato.");
        }
        if ($('#FechaPago').val() === "") {
          errores.push("Debés ingresar la fecha de pago.");
        }
        if ($('#importe').val() === "" || parseFloat($('#importe').val()) <= 0) {
          errores.push("Debés ingresar un importe válido.");
        }

        if (errores.length > 0) {
          Swal.fire({
            icon: 'warning',
            title: 'Faltan datos',
            html: errores.map((e) => `<p>• ${e}</p>`).join(""),
            confirmButtonText: 'Ok'
          });
          return;
        }

        // Mostrar confirmación antes de guardar
        Swal.fire({
          title: '¿Estás seguro?',
          text: "¿Quieres guardar este pago?",
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: 'Sí, guardar',
          cancelButtonText: 'Cancelar'
        }).then((result) => {
          if (result.isConfirmed) {
            $.ajax({
              type: 'POST',
              url: $(this).attr('action'),
              data: formData,
              success: function (data) {
                if (data.success) {
                  Swal.fire({
                    icon: 'success',
                    title: 'Pago guardado correctamente',
                    text: 'El pago se registró con éxito.',
                    confirmButtonText: 'Aceptar'
                  }).then(() => {
                    // Redirigir a la vista de detalles usando la URL proporcionada en la respuesta JSON
                    window.location.href = data.redirectUrl;
                  });
                } else {
                  Swal.fire({
                    icon: 'error',
                    title: 'Error al guardar el pago',
                    text: 'Hubo un problema al registrar el pago. Inténtelo nuevamente.',
                    confirmButtonText: 'Aceptar'
                  });
                }
              },
              error: function () {
                Swal.fire({
                  icon: 'error',
                  title: 'Error de conexión',
                  text: 'Hubo un error al conectar con el servidor.',
                  confirmButtonText: 'Aceptar'
                });
              }
            });
          }
        });
      });
    });
  </script>
}
