@model InmobiliariaLopez.Models.Contrato

@{
  ViewData["Title"] = "Crear Contrato";
}

<h1 class="mb-4 text-center" style="font-family: 'Roboto', sans-serif; font-size: 2rem; color: #343a40;">Crear Contrato
</h1>

<div class="card shadow-lg border-0 rounded-4">
  <div class="card-header bg-gradient text-dark border-0 rounded-4">
    <h5 class="mb-0">Crear un nuevo Contrato</h5>
  </div>
  <div class="card-body" style="padding: 1.5rem;">

    <form id="createContratoForm" asp-action="Create" method="post">
      @Html.AntiForgeryToken()
      <div class="form-group">
        <label asp-for="IdUsuarioCrea" class="control-label">Usuario Sistema</label>
        <select asp-for="IdUsuarioCrea" class="form-control">
          <option value="1">admin1@example.com</option>
          <option value="2">empleado1@example.com</option>
          <option value="3">empleado2@example.com</option>
          <option value="4">admin2@example.com</option>
          <option value="5">empleado3@example.com</option>
        </select>
        <span asp-validation-for="IdUsuarioCrea" class="text-danger"></span>
      </div>

      <div class="form-group mb-3">
        <label class="control-label">Inmueble</label>
        <select asp-for="IdInmueble" class="form-control" asp-items="ViewBag.Inmuebles">
          <option value="">Seleccione un inmueble</option>
        </select>
        <span asp-validation-for="IdInmueble" class="text-danger"></span>
      </div>

      <div class="form-group mb-3">
        <label class="control-label">Inquilino</label>
        <select asp-for="IdInquilino" class="form-control" asp-items="ViewBag.Inquilinos">
          <option value="">Seleccione un inquilino</option>
        </select>
        <span asp-validation-for="IdInquilino" class="text-danger"></span>
      </div>

      <div class="form-group">
        <label asp-for="FechaInicio" class="control-label"></label>
        <input asp-for="FechaInicio" type="date" class="form-control" />
        <span asp-validation-for="FechaInicio" class="text-danger"></span>
      </div>

      <div class="form-group">
        <label asp-for="FechaFin" class="control-label"></label>
        <input asp-for="FechaFin" type="date" class="form-control" />
        <span asp-validation-for="FechaFin" class="text-danger"></span>
      </div>

      <div class="form-group">
        <label asp-for="MontoMensual" class="control-label"></label>
        <input asp-for="MontoMensual" type="number" step="0.01" class="form-control" />
        <span asp-validation-for="MontoMensual" class="text-danger"></span>
      </div>

      <div class="card-footer d-flex justify-content-end">
        <button type="submit" class="btn btn-primary btn-sm me-2">Crear Contrato</button>
        <a href="@Url.Action("Index")" class="btn btn-secondary btn-sm">Volver al listado</a>
      </div>
    </form>
  </div>
</div>

@section Scripts {
  @{
    await Html.PartialAsync("_ValidationScriptsPartial");
  }
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('createContratoForm');

      form.addEventListener('submit', function (event) {
        event.preventDefault(); // Evitar el envío tradicional del formulario

        const formData = new FormData(form);

        fetch('@Url.Action("Create")', { // URL a tu acción Create
          method: 'POST',
          body: formData,
          headers: {
            'X-Requested-With': 'XMLHttpRequest' // Indica que es una petición AJAX
          }
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire({
                title: '¡Éxito!',
                text: 'Contrato creado correctamente.',
                icon: 'success',
                confirmButtonText: 'Ok'
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.href = data.redirectUrl;
                }
              });
            } else {
              let errorMessage = 'Error al crear el contrato.';
              if (data.message) {
                errorMessage = data.message; // Mostrar el mensaje específico del servidor (disponibilidad)
              } else if (data.errors) {
                // Si hay errores de ModelState, construimos un mensaje para mostrar
                let errorMessages = [];
                for (const key in data.errors) {
                  if (data.errors.hasOwnProperty(key)) {
                    errorMessages.push(`${key}: ${data.errors[key].join(', ')}`);
                  }
                }
                if (errorMessages.length > 0) {
                  errorMessage = errorMessages.join('<br>'); // Mostrar todos los errores con saltos de línea
                }
              }
              Swal.fire({
                title: '¡Fechas Ocupadas!', // Título personalizado
                html: errorMessage,
                icon: 'warning', // Icono de advertencia
                confirmButtonText: 'Ok'
              });
            }
          })
          .catch(error => {
            console.error('Error en la petición AJAX:', error);
            Swal.fire({
              title: '¡Error!',
              text: 'Ocurrió un error inesperado.',
              icon: 'error',
              confirmButtonText: 'Ok'
            });
          });
      });
    });
  </script>
}